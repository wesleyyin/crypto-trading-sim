{"ast":null,"code":"var _jsxFileName = \"/Users/work/Documents/GitHub/minimalist_social_media/minesse/src/components/user-profile.component.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class UserProfile extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.updateConnection = this.updateConnection.bind(this);\n    this.renderHead = this.renderHead.bind(this);\n    this.renderContent = this.renderContent.bind(this);\n    this.renderConnectStatus = this.renderConnectStatus.bind(this);\n    this.editHead = this.editHead.bind(this);\n    this.reqConnect = this.reqConnect.bind(this);\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n    this.state = {\n      userID: '',\n      viewedUser: '',\n      posts: [],\n      connectionStatus: 'none',\n      currPost: '',\n      connectionID: ''\n    };\n  }\n\n  updateConnection() {\n    const userA = this.state.userID;\n    const userB = this.state.viewedUser._id;\n    const connectData = {\n      userA: userA,\n      userB: userB\n    };\n    axios.get(\"http://localhost:5000/connections/byusers\", connectData).then(function (res) {\n      const status = res.data.status;\n\n      if (this.state.connectionStatus != status) {\n        this.setState({\n          connectionStatus: status\n        });\n\n        if (status != \"not connected\") {\n          this.setState({\n            connectionID: res.data.id\n          });\n        }\n      }\n    }.bind(this)).catch(err => console.log('Error: ' + err));\n  }\n\n  componentDidMount() {\n    const user = localStorage.getItem(\"username\");\n    alert(user);\n\n    if (user.length == 0) {\n      alert(\"you are not logged in\");\n      window.location.href = '/login';\n    }\n\n    const username = user;\n    const userData = {\n      username: username\n    };\n    console.log(userData);\n    axios.post(\"http://localhost:5000/users/findname\", userData).then(function (res) {\n      alert(res.data.status);\n\n      if (res.data.status) {\n        let id = res.data.id;\n        this.setState({\n          userID: id\n        });\n        const viewedUser = this.props.match.params.username;\n        const viewedUserData = {\n          username: viewedUser\n        };\n        axios.post(\"http://localhost:5000/users/findname\", viewedUserData).then(function (ret) {\n          if (ret.data.status) {\n            this.setState({\n              viewedUser: ret.data.user\n            });\n            updateConnection();\n          } else {\n            alert(ret.data.msg);\n            window.location.href = '/search';\n          }\n        }.bind(this));\n      } else {\n        alert(res.data.msg);\n      }\n    }.bind(this)).catch(err => console.log('Error: ' + err));\n  }\n\n  updateConnection() {\n    const userA = this.state.userID;\n    const userB = this.state.viewedUser._id;\n    const connectData = {\n      userA: userA,\n      userB: userB\n    };\n    axios.get(\"http://localhost:5000/connections/byusers\", connectData).then(function (res) {\n      const status = res.data.status;\n\n      if (this.state.connectionStatus != status) {\n        this.setState({\n          connectionStatus: status\n        });\n\n        if (status != \"not connected\") {\n          this.setState({\n            connectionID: res.data.id\n          });\n        }\n      }\n    }.bind(this)).catch(err => console.log('Error: ' + err));\n  }\n\n  renderHead() {\n    const nameDisplay = this.props.match.params.username;\n    const bio = this.state.viewedUser.bio;\n    const pfp = this.state.viewedUser.profilePic;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: pfp,\n        alt: \"Profile Pic\",\n        id: \"pfp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"profName\",\n        children: nameDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"bio\",\n        children: bio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }, this);\n  }\n\n  renderConnectStatus() {\n    const status = this.state.connectionStatus;\n\n    if (status == 'connected') {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onclick: disconnect(),\n        children: \"Disconnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this);\n    } else if (status == 'self') {\n      //display edit head button\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onclick: window.href = \"/edit-profile\",\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this);\n    } else if (status == 'requested') {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Requested\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 20\n      }, this);\n    } else if (status == 'pending') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [this.props.match.params.username, \" wants to connect with you\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onclick: connect(),\n          children: \"Accept\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onclick: disconnect(),\n          children: \"Decline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this); //display accept/decline buttons\n    } else {\n      //display connect button\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onclick: reqConnect(),\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this);\n    }\n  }\n\n  disconnect() {\n    axios.delete(\"http://localhost:5000/connections/\" + this.state.connectionID).then(function (res) {\n      alert(res);\n      updateConnection;\n    }).catch(err => console.log('Error: ' + err));\n  }\n\n  connect() {\n    axios.post(\"http://localhost:5000/connections/accept/\" + this.state.connectionID).then(function (res) {\n      alert(res);\n      updateConnection;\n    }).catch(err => console.log('Error: ' + err));\n  }\n\n  reqConnect() {\n    const userA = this.state.userID;\n    const userB = this.state.viewedUser._id;\n    const connectData = {\n      userA: userA,\n      userB: userB\n    };\n    axios.post(\"http://localhost:5000/connections/add\", connectData).then(function (res) {\n      alert(res);\n      updateConnection;\n    }).catch(err => console.log('Error: ' + err));\n  }\n\n  renderContent() {\n    const status = this.state.connectionStatus;\n\n    if (status == 'connected') {//display posts in feed format\n    } else if (status == 'self') {//display posts in feed format with edit/delete permissions\n    } else {//do not display posts\n      }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(this.renderHead, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(this.renderConnectStatus, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(this.renderContent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/work/Documents/GitHub/minimalist_social_media/minesse/src/components/user-profile.component.js"],"names":["React","Component","axios","Link","UserProfile","constructor","props","onChangeUsername","bind","onChangeDescription","updateConnection","renderHead","renderContent","renderConnectStatus","editHead","reqConnect","connect","disconnect","state","userID","viewedUser","posts","connectionStatus","currPost","connectionID","userA","userB","_id","connectData","get","then","res","status","data","setState","id","catch","err","console","log","componentDidMount","user","localStorage","getItem","alert","length","window","location","href","username","userData","post","match","params","viewedUserData","ret","msg","nameDisplay","bio","pfp","profilePic","delete","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport {Link} from 'react-router-dom';\n\n\nexport default class UserProfile extends Component{\n    constructor(props){\n        super(props)\n\n        this.onChangeUsername = this.onChangeUsername.bind(this);\n        this.onChangeDescription = this.onChangeDescription.bind(this);\n        this.updateConnection = this.updateConnection.bind(this);\n        this.renderHead = this.renderHead.bind(this);\n        this.renderContent = this.renderContent.bind(this);\n        this.renderConnectStatus = this.renderConnectStatus.bind(this);\n        this.editHead = this.editHead.bind(this);\n        this.reqConnect = this.reqConnect.bind(this);\n        this.connect = this.connect.bind(this);\n        this.disconnect = this.disconnect.bind(this);\n\n        this.state = {\n            userID : '',\n            viewedUser: '',\n            posts :[],\n            connectionStatus : 'none',\n            currPost : '',\n            connectionID : ''\n        };\n\n    }\n    updateConnection(){\n        const userA = this.state.userID;\n        const userB = this.state.viewedUser._id;\n        const connectData = {\n            userA: userA,\n            userB: userB,\n        };\n        axios.get(\"http://localhost:5000/connections/byusers\", connectData)\n            .then(function(res){\n                const status = res.data.status;\n                if(this.state.connectionStatus!=status){\n                    this.setState({\n                        connectionStatus: status\n                    });\n                    if(status!=\"not connected\"){\n                        this.setState({\n                            connectionID : res.data.id\n                        });\n                    }\n                }\n            }.bind(this))\n            .catch(err => console.log('Error: ' + err));\n    }\n    componentDidMount(){\n        const user = localStorage.getItem(\"username\");\n        alert(user);\n        if (user.length ==0) {\n            alert(\"you are not logged in\");\n          window.location.href = '/login';\n        }\n        const username = user;\n        const userData = {\n            username  : username,\n        }\n        console.log(userData);\n        \n        \n        axios.post(\"http://localhost:5000/users/findname\", userData)\n            .then(function(res){\n                alert(res.data.status);\n                if(res.data.status){\n                    let id = res.data.id\n                    this.setState({\n                        userID:id\n                    });\n                    const viewedUser = this.props.match.params.username;\n                    const viewedUserData = {\n                        username: viewedUser\n                    };\n                    axios.post(\"http://localhost:5000/users/findname\", viewedUserData)\n                        .then(function(ret){\n                            if(ret.data.status){\n                                this.setState({\n                                    viewedUser: ret.data.user\n                                });updateConnection();\n                            }else{\n                                alert(ret.data.msg);\n                                window.location.href = '/search';\n                            }\n                        }.bind(this)) \n\n                }else{\n                    alert(res.data.msg);\n                }\n            }.bind(this))\n            .catch(err => console.log('Error: ' + err));\n    }\n    updateConnection(){\n        const userA = this.state.userID;\n        const userB = this.state.viewedUser._id;\n        const connectData = {\n            userA: userA,\n            userB: userB,\n        };\n        axios.get(\"http://localhost:5000/connections/byusers\", connectData)\n            .then(function(res){\n                const status = res.data.status;\n                if(this.state.connectionStatus!=status){\n                    this.setState({\n                        connectionStatus: status\n                    });\n                    if(status!=\"not connected\"){\n                        this.setState({\n                            connectionID : res.data.id\n                        });\n                    }\n                }\n            }.bind(this))\n            .catch(err => console.log('Error: ' + err));\n    }\n    \n    \n    renderHead(){\n        const nameDisplay = this.props.match.params.username;\n        const bio = this.state.viewedUser.bio;\n        const pfp = this.state.viewedUser.profilePic;\n        return (<div>\n            <img src={pfp} alt =\"Profile Pic\" id = \"pfp\"/>\n            <h1 id = \"profName\">{nameDisplay}</h1>\n            <p id = \"bio\">{bio}</p>\n        </div>);\n    }\n     \n    renderConnectStatus(){\n        const status = this.state.connectionStatus;\n        if(status=='connected'){\n            return (<button onclick = {disconnect()}>Disconnect</button>);\n        }else if(status =='self'){\n            //display edit head button\n            return (<button onclick = {window.href = \"/edit-profile\"}>Edit</button>);\n        }else if(status =='requested'){\n            return(<p>Requested</p>)\n        }else if(status =='pending'){\n            return (\n            <div>\n                <p>{this.props.match.params.username} wants to connect with you</p>\n                <button onclick = {connect()}>Accept</button>\n                <button onclick = {disconnect()}>Decline</button>\n            </div>\n            \n                )\n            //display accept/decline buttons\n        }else{\n            //display connect button\n            return (<button onclick = {reqConnect()}>Connect</button>);\n        }\n    }\n    disconnect(){\n        axios.delete(\"http://localhost:5000/connections/\" + this.state.connectionID)\n        .then(function(res){\n            alert(res);\n            updateConnection;\n        })\n        .catch(err => console.log('Error: ' + err));\n    }\n    connect(){\n        axios.post(\"http://localhost:5000/connections/accept/\" + this.state.connectionID)\n        .then(function(res){\n            alert(res);\n            updateConnection;\n        })\n        .catch(err => console.log('Error: ' + err));\n    }\n    reqConnect(){\n        const userA = this.state.userID;\n        const userB = this.state.viewedUser._id;\n        const connectData = {\n            userA: userA,\n            userB: userB,\n        };\n        axios.post(\"http://localhost:5000/connections/add\", connectData)\n            .then(function(res){\n                alert(res);\n                updateConnection;\n            })\n            .catch(err => console.log('Error: ' + err));\n    }\n    renderContent(){\n        const status = this.state.connectionStatus;\n        if(status=='connected'){\n            //display posts in feed format\n        }else if(status =='self'){\n            //display posts in feed format with edit/delete permissions\n        }else{\n            //do not display posts\n        }\n    }\n\n    render(){\n        return (\n        <div>\n            <this.renderHead/>\n            <this.renderConnectStatus/>\n            <this.renderContent/>\n        </div>\n\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}